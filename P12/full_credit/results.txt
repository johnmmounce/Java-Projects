====================
HOMEWORK P12 RESULTS
====================

Spring 2023

NOTE: We will not be grading for "correct" answers, since your results may vary, but rather answers that are consistent with your measured results.

IMPORTANT: If at all possible, time your program on a machine with at least 4 cores. (CSE VM may be configured to use multiple cores in the VirtualBox properties panel.)

FULL CREDIT
===========

QUESTION 1: Which puzzle did you use as ThreadsOfSudoku's parameter to achieve a 30+ second runtime (using "real"):
puzzle 14 (14_zeros)

QUESTION 2: Provide the full ``time`` output for your program, with 1 to 16 threads. It may prove interesting to screenshot your system monitor while these run. You may be able to run all of these with a single bash command if you like (replace 14_zeros with your puzzle from QUESTION 1): 

for i in {1..16} ; do printf "\n Threads %d:\n" $i ; time (java ThreadsOfSudoku $i puzzle.txt 14_zeros > temp.txt) ; done

Example Timing (first 2 of 16 runs only on Antares):

ricegf@antares$ for i in {1..16} ; do printf "\n Threads %d:\n" $i ; time (java ThreadsOfSudoku $i puzzle.txt 14_zeros > temp.txt) ; done

 Threads 1:

real	2m0.684s
user	2m0.919s
sys	0m0.292s

 Threads 2:

real	1m4.553s
user	2m7.003s
sys	0m0.252s



YOUR Timing:

Threads 1:

real	1m58.429s
user	1m58.096s
sys	0m0.474s

 Threads 2:

real	1m16.447s
user	2m23.799s
sys	0m0.445s

Threads 3:

real	0m47.572s
user	2m9.445s
sys	0m0.476s

 Threads 4:

real	0m42.422s
user	2m24.097s
sys	0m0.461s

Threads 5:

real	0m41.829s
user	2m56.218s
sys	0m0.790s

 Threads 6:

real	0m38.817s
user	3m21.351s
sys	0m0.611s

Threads 7:

real	0m39.536s
user	3m52.794s
sys	0m0.640s

 Threads 8:

real	0m38.283s
user	4m25.548s
sys	0m0.659s

Threads 9:

real	0m37.559s
user	4m49.901s
sys	0m0.788s

 Threads 10:

real	0m38.333s
user	4m38.804s
sys	0m0.770s

Threads 11:

real	0m37.815s
user	4m19.008s
sys	0m0.831s

 Threads 12:

real	0m33.831s
user	3m46.207s
sys	0m0.667s

Threads 13:

real	0m39.823s
user	4m36.241s
sys	0m0.823s

 Threads 14:

real	0m35.020s
user	4m5.804s
sys	0m0.736s

Threads 15:

real	0m37.120s
user	4m25.075s
sys	0m0.836s

 Threads 16:

real	0m37.121s
user	4m33.204s
sys	0m0.843s



QUESTION 3: Does adding more threads continue to speed up the program? Do more threads ever slow down the program slightly?  Why or why not?

yes, at some thread intervals, adding more threads to the program will slow it down slightly. This is because adding more threads
causes more and more overhead to allocate CPU time to.



QUESTION 4: Does adding more threads increase the "system load", or is it constant regardless of the number of threads?  Why?

adding more threads will increse the system load because the more threads, the more things are trying to run simultaniously.



BONUS
=====

QUESTION 5: Time your thread pool version of ThreadsOfSudoku as you did for the full credit version. Post your timings here.

YOUR Timing:






QUESTION 6: Is a thread pool faster, slower, or roughly equivalent in performance? 



QUESTION 7: Compare the full credit and bonus solution code. Which do you believe is more supportable over a long lifetime of evolving hardware and environments?


